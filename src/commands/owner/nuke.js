module.exports = {
    name: 'nuke',
    description: 'EXTREMO: Remover todos os membros do grupo',
    usage: '/nuke [--all] [--force]',
    category: 'owner',
    
    async execute(sock, message, args) {
        const { safeSendMessage, isGroup, isOwner, getSender } = require('../../utils');
        const groupJid = message.key.remoteJid;
        const sender = getSender(message);
        
        if (!isOwner(sender)) {
            return await safeSendMessage(sock, groupJid, 'üö´ ACESSO NEGADO - COMANDO NUKE RESTRITO AO OWNER!');
        }
        
        if (!isGroup(groupJid)) {
            return await safeSendMessage(sock, groupJid, '‚ùå NUKE s√≥ funciona em grupos.');
        }
        
        const hasAll = args.includes('--all');
        const hasForce = args.includes('--force');
        
        try {
            const groupMetadata = await sock.groupMetadata(groupJid);
            const groupName = groupMetadata.subject;
            const participants = groupMetadata.participants;
            
            const botNumber = sock.user.id.split(':')[0] + '@s.whatsapp.net';
            const botParticipant = participants.find(p => p.id === botNumber);
            
            if (!botParticipant || (!botParticipant.admin && !hasForce)) {
                return await safeSendMessage(sock, groupJid, '‚ùå Bot precisa ser ADMIN para NUKE!\\n\\nüí° Use --force para tentar mesmo assim');
            }
            
            let targets = [];
            let adminsCount = 0;
            let membersCount = 0;
            
            for (const participant of participants) {
                if (participant.id === botNumber) continue;
                
                const isAdmin = participant.admin === 'admin' || participant.admin === 'superadmin';
                
                if (isAdmin) {
                    adminsCount++;
                    if (hasAll) {
                        targets.push(participant.id);
                    }
                } else {
                    membersCount++;
                    targets.push(participant.id);
                }
            }
            
            if (targets.length === 0) {
                return await safeSendMessage(sock, groupJid, '‚ùå Nenhum alvo v√°lido encontrado para NUKE.');
            }
            
            let confirmMsg = 'üíÄ NUKE PREPARADO - CONFIRMA√á√ÉO FINAL\\n\\n';
            confirmMsg += `üè∞ Grupo: ${groupName}\\n`;
            confirmMsg += `üéØ Alvos: ${targets.length} participantes\\n`;
            confirmMsg += `üëë Admins no grupo: ${adminsCount}\\n`;
            confirmMsg += `üë• Membros no grupo: ${membersCount}\\n\\n`;
            
            if (hasAll) {
                confirmMsg += '‚ö†Ô∏è MODO: TOTAL DESTRUCTION\\n';
                confirmMsg += 'üíÄ Todos ser√£o removidos (admins + membros)\\n\\n';
            } else {
                confirmMsg += 'üéØ MODO: MEMBROS APENAS\\n';
                confirmMsg += 'üëë Admins ser√£o preservados\\n\\n';
            }
            
            confirmMsg += 'üïê Iniciando NUKE em 3 segundos...\\n';
            confirmMsg += 'üè¥‚Äç‚ò†Ô∏è VG An√∫ncios - Opera√ß√£o Destrui√ß√£o';
            
            await safeSendMessage(sock, groupJid, confirmMsg);
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            let removed = 0;
            let errors = 0;
            
            await safeSendMessage(sock, groupJid, 'üíÄ NUKE INICIADO - REMOVENDO ALVOS...');
            
            const batchSize = hasForce ? 5 : 3;
            
            for (let i = 0; i < targets.length; i += batchSize) {
                const batch = targets.slice(i, i + batchSize);
                
                try {
                    const result = await sock.groupParticipantsUpdate(groupJid, batch, 'remove');
                    
                    if (result) {
                        for (const res of result) {
                            if (res.status === 200) {
                                removed++;
                            } else {
                                errors++;
                            }
                        }
                    }
                    
                } catch (batchError) {
                    console.error('Erro no lote NUKE:', batchError);
                    errors += batch.length;
                }
                
                await new Promise(resolve => setTimeout(resolve, hasForce ? 1000 : 2000));
                
                if (i % (batchSize * 2) === 0) {
                    const progress = Math.round(((i + batchSize) / targets.length) * 100);
                    await safeSendMessage(sock, groupJid, `‚ö° NUKE Progress: ${progress}% (${removed} removidos)`);
                }
            }
            
            let finalReport = 'üíÄ NUKE CONCLU√çDO - RELAT√ìRIO FINAL\\n\\n';
            finalReport += `üè∞ Grupo: ${groupName}\\n`;
            finalReport += `üéØ Alvos identificados: ${targets.length}\\n`;
            finalReport += `‚úÖ Removidos com sucesso: ${removed}\\n`;
            finalReport += `‚ùå Falhas na remo√ß√£o: ${errors}\\n`;
            finalReport += `üìà Taxa de sucesso: ${((removed/targets.length)*100).toFixed(1)}%\\n\\n`;
            
            if (removed > 0) {
                finalReport += 'üíÄ OPERA√á√ÉO NUKE BEM-SUCEDIDA!\\n';
            } else {
                finalReport += '‚ö†Ô∏è NUKE FALHOU - NENHUMA REMO√á√ÉO\\n';
            }
            
            finalReport += `\\n‚è∞ Conclu√≠do: ${new Date().toLocaleString('pt-BR')}\\n`;
            finalReport += 'üè¥‚Äç‚ò†Ô∏è VG An√∫ncios - Opera√ß√£o Destrui√ß√£o Finalizada';
            
            await safeSendMessage(sock, groupJid, finalReport);
            
            console.log(`üíÄ NUKE EXECUTADO: ${removed}/${targets.length} removidos no grupo ${groupName}`);
            
        } catch (error) {
            console.error('Erro NUKE:', error);
            await safeSendMessage(sock, groupJid, `üíÄ ERRO NO NUKE:\\n\\n‚ùå ${error.message}\\n\\nüè¥‚Äç‚ò†Ô∏è VG An√∫ncios`);
        }
    }
};
